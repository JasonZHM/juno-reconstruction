ans1.h5: 0.196
ans2.h5: 0.102 换p的损失函数为题目要求的函数
ans3.h5: 0.117 换pePerWF的损失函数为average_precision，增加pePerWF的round与astype(int)
ans4.h5: 0.105 在ans3.h5的基础上，去除round与astype(int)
ans5.h5: 0.107 将pePerWF的损失函数换为loss_eval，只是分母=波形积分
ans6.h5: 0.113 加入两个feature来评估p: peTime的平均值与标准差
ans7.h5: 0.091 在ans6.h5的基础上，使用训练集2-6
ans8.h5: 0.091 使用训练集2-16
ans9.h5: 0.09  调参，p的leaves 2**8, depth=-1
ansPlay.h5: 0.099 清理代码，使用model.ipynb的代码，训练出两个play模型，并且用play模型跑final.ipynb
ans10.h5: 0.091 使用全部训练集
ans11.h5: 0.091 使用手作算法的pePerWFCalc，而不是使用决策树
ans12.h5: 0.09  在11的基础上，调低learning rate为0.001
ans13.h5: 0.089 在12的基础上，使用波形积分的线性拟合作为pePerWF
ans14.h5: 0.092 干脆去掉了预测动量的后两个feature，发现剪枝过头了
ansPlay2.h5: 0.151 新的手作算法，一个数据集，但因为model没有搞好所以没有达到最佳拟合值，比较烂
ans15.h5: 0.088 使用新的手作算法，所有训练集，pePerWF取手作算法的值
ans16.h5: 0.088 使用优化后的手作算法，应该与ans15.h5一样
ans17.h5: 0.087 将pePerWF取手作算法然后筛选暗噪声之后的计数
